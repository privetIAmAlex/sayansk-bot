import time
from telebot import types
import random

class Worker:

    bad_words = []
    black_list = {}
    admins = [351956291, 259089620]
    messages = 0
    stat = {}

    phrases = [
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0}!‚ò∫Ô∏è\n\n–£ –Ω–∞—Å –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —á–∞—Ç! –ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∏ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.üö´\n–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–≤–µ—Ä—Ö—É —Å–æ–æ–±—â–µ–Ω–∏–∏üëÜ\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ!ü§ó",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {0}!‚úãÔ∏è\n\n–£ –Ω–∞—Å –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —á–∞—Ç! –ó–¥–µ—Å—å –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –∏ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.üö´\n–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–≤–µ—Ä—Ö—É —Å–æ–æ–±—â–µ–Ω–∏–∏üëÜ\n\n–†–∞—Å—Å–∫–∞–∂–µ—à—å —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ?üòä",
        "–ö–∞–∫–∏–µ –ª—é–¥–∏! –ü—Ä–∏–≤–µ—Ç, {0}!üòé\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã, –∞ —Ç–æ –∑–∞–±–∞–Ω—é. –®—É—Ç–∫–∞ü§£\n–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–≤–µ—Ä—Ö—É —Å–æ–æ–±—â–µ–Ω–∏–∏üëÜ\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µü§ó",
        "–ü—Ä–∏–≤–µ—Ç, {0}!ü§ì\n\n–£ –Ω–∞—Å –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —á–∞—Ç, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–æ–π—Å—è –ø–∏—Å–∞—Ç—å, –º—ã –Ω–µ –∫—É—Å–∞–µ–º—Å—è!üòÑ –¢–æ–ª—å–∫–æ –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòâ\n–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–≤–µ—Ä—Ö—É —Å–æ–æ–±—â–µ–Ω–∏–∏üëÜ"
    ]

    BOT = None
    question = ""
    variants = {}
    voters = {}

    def __init__(self):
        with open('badwords.txt', 'r', encoding='cp1251') as f:  
            content = f.readlines()
            for word in content:
                self.bad_words.append(word[:-1])

    def FindBadWord(self, message):
        for word in message.text.split(' '):
            word = word.lower()
            for bad_word in self.bad_words:
                if word == bad_word or "—Ö—É–µ–Ω" in word:
                    return True
        return False

    def BlockUser(self, _bot, chat_id, user_id, user_firstname, message_id):
        if user_id in self.admins:
            _bot.send_message(chat_id, "–¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ωüòë", reply_to_message_id=message_id)
            return
        time_now = time.time()
        black_keys = self.black_list.keys()
        if user_id in black_keys:
            count = self.black_list.get(user_id)
            count += 1
            self.black_list[user_id] = count

            if count == 2:
                _bot.restrict_chat_member(chat_id, user_id, until_date=time_now+300)
                _bot.send_message(chat_id, "<b>{} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ 5 –º–∏–Ω—É—Ç</b>\n\n{}, —É –Ω–∞—Å –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è!\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∂–µ!".format(user_firstname, user_firstname), parse_mode="html")

            elif count >= 3:
                _bot.restrict_chat_member(chat_id, user_id, until_date=time_now+3600)
                _bot.send_message(chat_id, "<b>{} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ 1 —á–∞—Å</b>\n\n{}, —É –Ω–∞—Å –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è!\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∂–µ!".format(user_firstname, user_firstname), parse_mode="html")
        else:
            self.black_list.update({user_id:1})
            _bot.restrict_chat_member(chat_id, user_id, until_date=time_now+60)
            _bot.send_message(chat_id, "<b>{} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ 1 –º–∏–Ω—É—Ç—É</b>\n\n{}, —É –Ω–∞—Å –Ω–µ–ª—å–∑—è –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è!\n–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∂–µ!".format(user_firstname, user_firstname), parse_mode="html")
        _bot.delete_message(chat_id, message_id)

    def Count(self, user_id):
        self.messages += 1
        ids = self.stat.keys()
        if user_id in ids:
            self.stat[user_id] += 1
        else:
            self.stat.update({user_id:1})

    def GetKey(self, d, value):
        for k, v in d.items():
            if v == value:
                return k

    def GetUsernameByID(self, _bot, chat_id, id):
        user_info = _bot.get_chat_member(chat_id, id)
        if user_info.user.username != None:
            return "@" + user_info.user.username
        else:
            return user_info.user.first_name

    def CurrentWord(self, number):
        iy = ['11', '12', '13', '14', '5', '6', '7', '8', '9', '0']
        for i in range(len(iy)):
            if iy[i] in number:
                return "—Å–æ–æ–±—â–µ–Ω–∏–π"          
        if number.endswith('1'):
            return "—Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif number.endswith('2') or number.endswith('3') or number.endswith('4'):
            return "—Å–æ–æ–±—â–µ–Ω–∏—è"
        else:
            return "—Å–æ–æ–±—â."

    def GetCount(self, _bot, chat_id):
        names = ""
        word = self.CurrentWord(str(self.messages))
        sorted_stat = sorted(self.stat.values(), reverse=True)
        try:
            for i in range(9):
                username = self.GetUsernameByID(_bot, chat_id, self.GetKey(self.stat, sorted_stat[i]))
                names += "{} - {}\n".format(username, sorted_stat[i])
        except Exception:
            pass
        letter = "–í–æ—Ç –∏ –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É –µ—â—ë –æ–¥–Ω–∞ –Ω–µ–¥–µ–ª—è! –ò –≤–æ—Ç –≤–∞–º –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n<i>–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:</i>\n{}\n–ê –≤—Å–µ–≥–æ –±—ã–ª–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ <b>{}</b> {}!\n–£–¥–∞—á–∏ –≤ –Ω–∞—Å—Ç—É–ø–∞—é—â–µ–π –Ω–µ–¥–µ–ª–µ!üòâ".format(names, self.messages, word)
        _bot.send_message(chat_id, letter, parse_mode="HTML")

    def HelloUser(self, _bot, _message):
        user_name = _message.new_chat_member.first_name
        _bot.send_message(_message.chat.id, random.choice(self.phrases).format(user_name))

    def ButtonsKeyboard(self):
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(*[types.InlineKeyboardButton(text=f"{str(var)} - {str(self.variants.get(var))}", callback_data=f"{str(var)} - {str(self.variants.get(var))}") for var in self.variants.keys()])        
        return keyboard

    def Interview(self, _bot, _message):
        _bot.send_message(_message.chat.id, self.question, reply_markup=self.ButtonsKeyboard())

    def HandlerCLick(self, _c, _bot):
        answer = _c.data.split(' ')
        try:
            for key in self.variants:
                if answer[0] == key and _c.from_user.id not in self.voters:
                    self.variants[key] += 1
                    self.voters.update({_c.from_user.id:answer[0]})              
                    _bot.edit_message_text(
                        chat_id=_c.message.chat.id,
                        message_id=_c.message.message_id,
                        text=self.question,
                        reply_markup=self.ButtonsKeyboard()
                    )
                    return
                elif answer[0] == key and _c.from_user.id in self.voters:
                    self.variants[self.voters[_c.from_user.id]] -= 1
                    self.variants[key] += 1                
                    self.voters.update({_c.from_user.id:answer[0]})
                    _bot.edit_message_text(
                        chat_id=_c.message.chat.id,
                        message_id=_c.message.message_id,
                        text=self.question,
                        reply_markup=self.ButtonsKeyboard()
                    )
                    return
        except Exception:
            pass        
                
    def CreateInterview(self, _bot, _message):
        self.BOT = _bot
        self.BOT.send_message(_message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:")
        self.BOT.register_next_step_handler(_message, self.add_question)
    
    def add_question(self, _message):
        self.question = _message.text
        self.BOT.send_message(_message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:")
        self.BOT.register_next_step_handler(_message, self.variant)
    
    def variant(self, _message):
        if _message.text == "/done":
            return
        self.variants.update({_message.text:0})
        self.BOT.send_message(_message.chat.id, f"–í–∞—Ä–∏–∞–Ω—Ç <b>'{_message.text}'</b> –¥–æ–±–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /done\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö", parse_mode="HTML")
        self.BOT.register_next_step_handler(_message, self.variant)

    def Confirmation(self, _bot, _message):
        keyboard = types.ReplyKeyboardMarkup(True, True)
        keyboard.row("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–£–¥–∞–ª–∏—Ç—å")
        _bot.send_message(_message.from_user.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É?", reply_markup=keyboard)
        _bot.register_next_step_handler(_message, self._conf)
    
    def _conf(self, _message):
        if _message.text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å":
            self.BOT.send_message(-1001138206230, self.question, reply_markup=self.ButtonsKeyboard())#1001137097313
            self.BOT.send_message(_message.from_user.id, "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
            self.variants.clear()
            self.voters.clear()
        else:
            self.variants.clear()
            self.voters.clear()
            self.question = ""
            self.BOT.send_message(_message.from_user.id, "–£–¥–∞–ª–µ–Ω–æ")            
            self.BOT = None